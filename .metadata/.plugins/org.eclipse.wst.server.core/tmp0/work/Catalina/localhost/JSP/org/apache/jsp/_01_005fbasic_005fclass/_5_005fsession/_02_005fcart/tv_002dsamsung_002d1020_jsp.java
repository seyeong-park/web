/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.54
 * Generated at: 2020-05-13 03:08:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._01_005fbasic_005fclass._5_005fsession._02_005fcart;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class tv_002dsamsung_002d1020_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<html> \r\n");
      out.write("<head><title> 우리 쇼핑몰 </title></head> \r\n");
      out.write("<body> \r\n");
      out.write(" \r\n");
      out.write("<table><tr><td><img src='imgs/1020.jpg' width='180'> \r\n");
      out.write(" \r\n");
      out.write("</td><td> \r\n");
      out.write("^^상품설명^^ \r\n");
      out.write("*14\" 화면 명품 플러스 \r\n");
      out.write("*절약형 절전 TV \r\n");
      out.write("*Dual스피커 채용의 고감각 디자인 \r\n");
      out.write("(측면Ear Type)  \r\n");
      out.write("*초절전 버튼(대기 소비 전력 Zero) \r\n");
      out.write("*A/V 입력 단자: 후1 \r\n");
      out.write("*다기능 간단 리모컨(VTR 조작기능)  \r\n");
      out.write("*크기: 380 X 325 X 381(mm) \r\n");
      out.write("</td></tr></table> \r\n");
      out.write(" \r\n");
      out.write("<pre> \r\n");
      out.write("[[ 특징 ]] \r\n");
      out.write("*절전 스위치를 내장한 초절전 TV:  \r\n");
      out.write("대기 소비전력을 0으로 낮추어서 TV 평균 사용 기간인 \r\n");
      out.write("7년이 지나면 14인치 TV 1대를 구입할 수 있는 금액을 \r\n");
      out.write("아낄 수 있습니다.  \r\n");
      out.write("(1일 6시간 시청기준, 월 500KW이상 사용 가정의 경우)  \r\n");
      out.write("(본 제품은 에너지 절약마크 획득 제품입니다 )  \r\n");
      out.write("\r\n");
      out.write("*고감각 디자인:  \r\n");
      out.write("DUAL 스피커를 채용한 미려한 디자인으로 어디서나 잘 \r\n");
      out.write("어울리는 고감각 디자인 제품입니다.  \r\n");
      out.write("\r\n");
      out.write("*다기능 간단 리모컨 채용:  \r\n");
      out.write("TV와 VTR을 겸용으로 사용할수 있는 인체공학적 간단 리모컨을 \r\n");
      out.write("채용하고 있습니다. \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("</pre> \r\n");
      out.write("147,000 원 \r\n");
      out.write("<form method='post' action='Cart.jsp'> \r\n");
      out.write("<input type='hidden' name='id' value=\"1020\"> \r\n");
      out.write("<input type='hidden' name='name' value=\"삼성 TV CT 14R1\"> \r\n");
      out.write("<input type='hidden' name='price' value=\"147000\"> \r\n");
      out.write("<input type='submit' value=\"장바구니\"> \r\n");
      out.write("</form> \r\n");
      out.write(" \r\n");
      out.write("</body> \r\n");
      out.write("</html> \r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
