package board.service;

import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;

import board.model.BoardDao;
import board.model.BoardException;
import board.model.BoardRec;
import board.session.BoardRepository;

public class BoardService {
		
		private static BoardService service;
		int totalRecCount ;
		int pageTotalCount;
		int countPerPage = 5;
		BoardRepository repo = new BoardRepository();
		private BoardService() {}
		
		public static BoardService getInstance(){
			if( service == null) service = new BoardService();
			return service;
		}
		public List<BoardRec> selectBoard(String pNum) {
			int pageNum = 1;
			if( pNum!=null) pageNum = Integer.parseInt(pNum);
			int startRow = (pageNum-1)*countPerPage+1;
			int endRow = (pageNum)*countPerPage;
			return repo.selectBoard(startRow,endRow);
		}
		public Integer insertBoard(BoardRec c) {
			int groupId = repo.selectGroudId();
			c.setGroupId(groupId);
			DecimalFormat dformat = new DecimalFormat("0000000000");
			c.setSequenceNo( dformat.format(groupId) + "999999");
			return repo.insertBoard(c);
		}
		public BoardRec selectBoardByPrimaryKey(String id) {
			Long articleId = 0L;
			if( id != null ) articleId = Long.parseLong(id);
			repo.increaseReadCount(articleId);
			return repo.selectBoardByPrimaryKey(articleId);
		}
		public Integer updateBoard(BoardRec c) {
			return repo.updateBoard(c);
		}
		public Integer deleteBoard(String id,String password) {
			Long article_id = 0L;
			if( id!=null ) article_id = Long.parseLong( id );
			return repo.deleteBoard(article_id,password);
		}
		public int getTotalCount() {
			totalRecCount = repo.getTotalCount();
			pageTotalCount = totalRecCount/countPerPage;
			System.out.println(totalRecCount);
			if(totalRecCount%countPerPage!=0) pageTotalCount++;
			
			return pageTotalCount;
		}
		public BoardRec reply(String pId,BoardRec rec) throws BoardException {
			Long parentId = 0L;
			if( pId != null ) parentId = Long.parseLong(pId);


			BoardRec parent = repo.selectBoardByPrimaryKey(parentId);
			// 부모게시글의 레코드를 얻어옴
			
			// 부모게시글을 체크
			checkParent(parent, parentId);
			
			// 답변글에 순서번호 구하기
			String maxSeqNum = parent.getSequenceNo();
			String minSeqNum = getSearchMinSeqNum( parent );
			
			String lastChildSeq = repo.selectLastSequenceNumber( maxSeqNum, minSeqNum );
			
			String sequenceNumber = getSequenceNumber( parent,lastChildSeq);
			
			
			rec.setGroupId(parent.getGroupId()); // 부모의 그룹번호와 동일하게 지정
			rec.setSequenceNo(sequenceNumber);	 // 위에서 구한 답변글의 순서번호 지정
			rec.setPostingDate( (new Date()).toString());	 // 등록일
			
			int articleId = repo.insertBoard(rec);
			rec.setArticleId(articleId);
			
			return rec;
		}
		private void checkParent( BoardRec parent, Long pId ) throws BoardException
		{
			
			if( parent == null ) throw new BoardException("부모글이 존재하지 않음 : " + pId );
			
			int parentLevel = parent.getLevel();
			if( parentLevel == 3 ) throw new BoardException("3단계 마지막 레벨 글에는 답변을 달 수 없습니다.");
		
		}
		private String getSearchMinSeqNum( BoardRec parent )
		{
			String parentSeqNum = parent.getSequenceNo();
			DecimalFormat dFormat = new DecimalFormat("0000000000000000");
			long parentSeqLongValue = Long.parseLong(parentSeqNum);
			long searchMinLongValue = 0;
			
			switch( parent.getLevel()) // lv.0 이면 999999삭제 , 1이면 9999삭제 2면 99 삭제
			{
			case 0 : searchMinLongValue = parentSeqLongValue / 1000000L * 1000000L; break;
			case 1 : searchMinLongValue = parentSeqLongValue / 10000L * 10000L; break;
			case 2 : searchMinLongValue = parentSeqLongValue / 100L * 100L; break;
			}
			return dFormat.format(searchMinLongValue); //뒤에 6자리가 0이되서 나감
		}
		private String getSequenceNumber( BoardRec parent, String lastChildSeq ) throws BoardException
		{
			long parentSeqLong	= Long.parseLong( parent.getSequenceNo());
			int  parentLevel	= parent.getLevel();
			
			long decUnit = 0;
			if		( parentLevel == 0 ){	decUnit = 10000L;	}
			else if	( parentLevel == 1 ){	decUnit = 100L;		}
			else if ( parentLevel == 2 ){	decUnit = 1L;		}
			
			String sequenceNumber = null;
			
			DecimalFormat dFormat = new DecimalFormat("0000000000000000");
			if( lastChildSeq == null ){			// 답변글이 없다면
				sequenceNumber = dFormat.format(parentSeqLong-decUnit);
			} else {							// 답변글이 있다면, 마지막 답변글인지 확인
				String orderOfLastChildSeq = null;
				if( parentLevel == 0 ){
					orderOfLastChildSeq = lastChildSeq.substring(10,12);
					sequenceNumber = lastChildSeq.substring(0, 12) + "9999";
				}else if( parentLevel == 1 ){
					orderOfLastChildSeq = lastChildSeq.substring(12,14);
					sequenceNumber = lastChildSeq.substring(0, 14) + "99";				
				}else if( parentLevel == 2 ){
					orderOfLastChildSeq = lastChildSeq.substring(14,16);
					sequenceNumber = lastChildSeq;			
				}
				
				if( orderOfLastChildSeq.equals("00")){
					throw new BoardException("마지막 자식 글이 이미 존재합니다.");
				}
				
				long seq = Long.parseLong(sequenceNumber) - decUnit;
				sequenceNumber = dFormat.format(seq);
				
				return sequenceNumber; 
			}
			return sequenceNumber;
			
		}
}
